{"version":3,"sources":["components/video.js","components/menu.js","App.js","serviceWorker.js","index.js"],"names":["Video","controls","autostart","autoPlay","muted","src","this","props","React","Component","Menu","handleClick","bind","e","text","target","value","chooseVideo","onClick","type","name","VIDEOS","fast","slow","cute","eek","App","state","newVideo","setState","ReactDOM","render","document","getElementById","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kNAEaA,EAAb,uKAEI,OACE,6BACE,2BAAOC,UAAQ,EAACC,WAAS,EAACC,UAAQ,EAACC,OAAK,EACxCC,IAAOC,KAAKC,MAAMF,WAL1B,GAA2BG,IAAMC,WCApBC,EAAb,kDACE,WAAYH,GAAO,IAAD,8BAChB,cAAMA,IACDI,YACL,EAAKA,YAAYC,KAAjB,gBAHgB,EADpB,wDAMcC,GACV,IAAIC,EAAOD,EAAEE,OAAOC,MACpBV,KAAKC,MAAMU,YAAYH,KAR3B,+BAcI,OACE,0BAAMI,QAAWZ,KAAKK,aACpB,2BAAOQ,KAAK,QAAQC,KAAK,MAAMJ,MAAM,SADvC,QAEE,2BAAOG,KAAK,QAAQC,KAAK,MAAMJ,MAAM,SAFvC,QAGE,2BAAOG,KAAK,QAAQC,KAAK,MAAMJ,MAAM,SAHvC,QAIE,2BAAOG,KAAK,QAAQC,KAAK,MAAMJ,MAAM,QAJvC,YAfN,GAA0BR,IAAMC,WCG1BY,EAAS,CACbC,KAAM,iFACNC,KAAM,iFACNC,KAAM,iFACNC,IAAK,iFAIDC,E,kDACJ,WAAYnB,GAAQ,IAAD,8BACjB,cAAMA,IAEDoB,MAAQ,CAAEtB,IAAKgB,EAAOC,MAC3B,EAAKL,YACL,EAAKA,YAAYL,KAAjB,gBALiB,E,wDAQPgB,GACVtB,KAAKuB,SAAS,CACZxB,IAAKgB,EAAOO,O,+BAId,OACE,6BACE,4CACA,kBAAC,EAAD,CAAMX,YAAeX,KAAKW,cAC1B,kBAAC,EAAD,CAAOZ,IAAOC,KAAKqB,MAAMtB,W,GAnBfG,IAAMC,WAyBxBqB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SAEXP,QC9BKQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNR,IAASC,OACP,kBAAC,IAAMQ,WAAP,KACE,kBAAC,EAAD,OAEFP,SAASC,eAAe,SDyHpB,kBAAmBO,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6a25c653.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport class Video extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <video controls autostart autoPlay muted\r\n        src = {this.props.src}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport class Menu extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.handleClick =\r\n    this.handleClick.bind(this)\r\n  }\r\n  handleClick(e){\r\n    var text = e.target.value;\r\n    this.props.chooseVideo(text);\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <form onClick = {this.handleClick}>\r\n        <input type=\"radio\" name=\"src\" value=\"fast\" /> fast\r\n        <input type=\"radio\" name=\"src\" value=\"slow\" /> slow\r\n        <input type=\"radio\" name=\"src\" value=\"cute\" /> cute\r\n        <input type=\"radio\" name=\"src\" value=\"eek\" /> eek\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Video } from 'C:/Users/19496/my-app/src/components/video';\r\nimport { Menu } from 'C:/Users/19496/my-app/src/components/menu';\r\n\r\nconst VIDEOS = {\r\n  fast: 'https://s3.amazonaws.com/codecademy-content/courses/React/react_video-fast.mp4',\r\n  slow: 'https://s3.amazonaws.com/codecademy-content/courses/React/react_video-slow.mp4',\r\n  cute: 'https://s3.amazonaws.com/codecademy-content/courses/React/react_video-cute.mp4',\r\n  eek: 'https://s3.amazonaws.com/codecademy-content/courses/React/react_video-eek.mp4'\r\n};\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { src: VIDEOS.fast };\r\n    this.chooseVideo =\r\n    this.chooseVideo.bind(this);\r\n\r\n  }\r\n  chooseVideo(newVideo){\r\n    this.setState({\r\n      src: VIDEOS[newVideo]\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Video Player</h1>\r\n        <Menu chooseVideo = {this.chooseVideo}/>\r\n        <Video src = {this.state.src} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}